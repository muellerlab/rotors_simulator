// Generated by gencpp from file hiperlab_rostools/telemetry.msg
// DO NOT EDIT!


#ifndef HIPERLAB_ROSTOOLS_MESSAGE_TELEMETRY_H
#define HIPERLAB_ROSTOOLS_MESSAGE_TELEMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hiperlab_rostools
{
template <class ContainerAllocator>
struct telemetry_
{
  typedef telemetry_<ContainerAllocator> Type;

  telemetry_()
    : header()
    , vehicleID(0)
    , type(0)
    , packetNumber(0)
    , seqNum(0)
    , accelerometer()
    , rateGyro()
    , position()
    , attitude()
    , velocity()
    , attitudeYPR()
    , motorForces()
    , debugVals()
    , batteryVoltage(0.0)
    , panicReason(0)
    , warnings(0)  {
      accelerometer.assign(0.0);

      rateGyro.assign(0.0);

      position.assign(0.0);

      attitude.assign(0.0);

      velocity.assign(0.0);

      attitudeYPR.assign(0.0);

      motorForces.assign(0.0);

      debugVals.assign(0.0);
  }
  telemetry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicleID(0)
    , type(0)
    , packetNumber(0)
    , seqNum(0)
    , accelerometer()
    , rateGyro()
    , position()
    , attitude()
    , velocity()
    , attitudeYPR()
    , motorForces()
    , debugVals()
    , batteryVoltage(0.0)
    , panicReason(0)
    , warnings(0)  {
  (void)_alloc;
      accelerometer.assign(0.0);

      rateGyro.assign(0.0);

      position.assign(0.0);

      attitude.assign(0.0);

      velocity.assign(0.0);

      attitudeYPR.assign(0.0);

      motorForces.assign(0.0);

      debugVals.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _vehicleID_type;
  _vehicleID_type vehicleID;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _packetNumber_type;
  _packetNumber_type packetNumber;

   typedef uint8_t _seqNum_type;
  _seqNum_type seqNum;

   typedef boost::array<double, 3>  _accelerometer_type;
  _accelerometer_type accelerometer;

   typedef boost::array<double, 3>  _rateGyro_type;
  _rateGyro_type rateGyro;

   typedef boost::array<double, 3>  _position_type;
  _position_type position;

   typedef boost::array<double, 3>  _attitude_type;
  _attitude_type attitude;

   typedef boost::array<double, 3>  _velocity_type;
  _velocity_type velocity;

   typedef boost::array<double, 3>  _attitudeYPR_type;
  _attitudeYPR_type attitudeYPR;

   typedef boost::array<double, 4>  _motorForces_type;
  _motorForces_type motorForces;

   typedef boost::array<double, 6>  _debugVals_type;
  _debugVals_type debugVals;

   typedef double _batteryVoltage_type;
  _batteryVoltage_type batteryVoltage;

   typedef uint8_t _panicReason_type;
  _panicReason_type panicReason;

   typedef uint8_t _warnings_type;
  _warnings_type warnings;





  typedef boost::shared_ptr< ::hiperlab_rostools::telemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiperlab_rostools::telemetry_<ContainerAllocator> const> ConstPtr;

}; // struct telemetry_

typedef ::hiperlab_rostools::telemetry_<std::allocator<void> > telemetry;

typedef boost::shared_ptr< ::hiperlab_rostools::telemetry > telemetryPtr;
typedef boost::shared_ptr< ::hiperlab_rostools::telemetry const> telemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hiperlab_rostools::telemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hiperlab_rostools::telemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hiperlab_rostools

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'hiperlab_rostools': ['/home/ean/catkin_ws/src/hiperlab_rostools/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hiperlab_rostools::telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hiperlab_rostools::telemetry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiperlab_rostools::telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiperlab_rostools::telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiperlab_rostools::telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiperlab_rostools::telemetry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hiperlab_rostools::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b7c7578027821d1787743b04da03a83";
  }

  static const char* value(const ::hiperlab_rostools::telemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b7c7578027821d1ULL;
  static const uint64_t static_value2 = 0x787743b04da03a83ULL;
};

template<class ContainerAllocator>
struct DataType< ::hiperlab_rostools::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hiperlab_rostools/telemetry";
  }

  static const char* value(const ::hiperlab_rostools::telemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hiperlab_rostools::telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint8 vehicleID\n\
uint8 type\n\
uint8 packetNumber\n\
uint8 seqNum\n\
float64[3] accelerometer\n\
float64[3] rateGyro\n\
float64[3] position\n\
float64[3] attitude\n\
float64[3] velocity\n\
float64[3] attitudeYPR\n\
float64[4] motorForces\n\
float64[6] debugVals\n\
float64 batteryVoltage\n\
uint8 panicReason\n\
uint8 warnings\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::hiperlab_rostools::telemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hiperlab_rostools::telemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicleID);
      stream.next(m.type);
      stream.next(m.packetNumber);
      stream.next(m.seqNum);
      stream.next(m.accelerometer);
      stream.next(m.rateGyro);
      stream.next(m.position);
      stream.next(m.attitude);
      stream.next(m.velocity);
      stream.next(m.attitudeYPR);
      stream.next(m.motorForces);
      stream.next(m.debugVals);
      stream.next(m.batteryVoltage);
      stream.next(m.panicReason);
      stream.next(m.warnings);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct telemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hiperlab_rostools::telemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hiperlab_rostools::telemetry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicleID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicleID);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "packetNumber: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.packetNumber);
    s << indent << "seqNum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seqNum);
    s << indent << "accelerometer[]" << std::endl;
    for (size_t i = 0; i < v.accelerometer.size(); ++i)
    {
      s << indent << "  accelerometer[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.accelerometer[i]);
    }
    s << indent << "rateGyro[]" << std::endl;
    for (size_t i = 0; i < v.rateGyro.size(); ++i)
    {
      s << indent << "  rateGyro[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rateGyro[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "attitude[]" << std::endl;
    for (size_t i = 0; i < v.attitude.size(); ++i)
    {
      s << indent << "  attitude[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.attitude[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "attitudeYPR[]" << std::endl;
    for (size_t i = 0; i < v.attitudeYPR.size(); ++i)
    {
      s << indent << "  attitudeYPR[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.attitudeYPR[i]);
    }
    s << indent << "motorForces[]" << std::endl;
    for (size_t i = 0; i < v.motorForces.size(); ++i)
    {
      s << indent << "  motorForces[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motorForces[i]);
    }
    s << indent << "debugVals[]" << std::endl;
    for (size_t i = 0; i < v.debugVals.size(); ++i)
    {
      s << indent << "  debugVals[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.debugVals[i]);
    }
    s << indent << "batteryVoltage: ";
    Printer<double>::stream(s, indent + "  ", v.batteryVoltage);
    s << indent << "panicReason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.panicReason);
    s << indent << "warnings: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.warnings);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIPERLAB_ROSTOOLS_MESSAGE_TELEMETRY_H
