// Generated by gencpp from file hiperlab_rostools/mocap_output.msg
// DO NOT EDIT!


#ifndef HIPERLAB_ROSTOOLS_MESSAGE_MOCAP_OUTPUT_H
#define HIPERLAB_ROSTOOLS_MESSAGE_MOCAP_OUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace hiperlab_rostools
{
template <class ContainerAllocator>
struct mocap_output_
{
  typedef mocap_output_<ContainerAllocator> Type;

  mocap_output_()
    : header()
    , vehicleID(0)
    , posx(0.0)
    , posy(0.0)
    , posz(0.0)
    , attyaw(0.0)
    , attpitch(0.0)
    , attroll(0.0)
    , attq0(0.0)
    , attq1(0.0)
    , attq2(0.0)
    , attq3(0.0)  {
    }
  mocap_output_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicleID(0)
    , posx(0.0)
    , posy(0.0)
    , posz(0.0)
    , attyaw(0.0)
    , attpitch(0.0)
    , attroll(0.0)
    , attq0(0.0)
    , attq1(0.0)
    , attq2(0.0)
    , attq3(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _vehicleID_type;
  _vehicleID_type vehicleID;

   typedef double _posx_type;
  _posx_type posx;

   typedef double _posy_type;
  _posy_type posy;

   typedef double _posz_type;
  _posz_type posz;

   typedef double _attyaw_type;
  _attyaw_type attyaw;

   typedef double _attpitch_type;
  _attpitch_type attpitch;

   typedef double _attroll_type;
  _attroll_type attroll;

   typedef double _attq0_type;
  _attq0_type attq0;

   typedef double _attq1_type;
  _attq1_type attq1;

   typedef double _attq2_type;
  _attq2_type attq2;

   typedef double _attq3_type;
  _attq3_type attq3;





  typedef boost::shared_ptr< ::hiperlab_rostools::mocap_output_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hiperlab_rostools::mocap_output_<ContainerAllocator> const> ConstPtr;

}; // struct mocap_output_

typedef ::hiperlab_rostools::mocap_output_<std::allocator<void> > mocap_output;

typedef boost::shared_ptr< ::hiperlab_rostools::mocap_output > mocap_outputPtr;
typedef boost::shared_ptr< ::hiperlab_rostools::mocap_output const> mocap_outputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hiperlab_rostools::mocap_output_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hiperlab_rostools

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'hiperlab_rostools': ['/home/ean/catkin_ws/src/hiperlab_rostools/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hiperlab_rostools::mocap_output_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hiperlab_rostools::mocap_output_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hiperlab_rostools::mocap_output_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4feb5cff8b8b373ccfd1c795428f81bd";
  }

  static const char* value(const ::hiperlab_rostools::mocap_output_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4feb5cff8b8b373cULL;
  static const uint64_t static_value2 = 0xcfd1c795428f81bdULL;
};

template<class ContainerAllocator>
struct DataType< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hiperlab_rostools/mocap_output";
  }

  static const char* value(const ::hiperlab_rostools::mocap_output_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int64 vehicleID\n\
float64 posx\n\
float64 posy\n\
float64 posz\n\
float64 attyaw\n\
float64 attpitch\n\
float64 attroll\n\
float64 attq0\n\
float64 attq1\n\
float64 attq2\n\
float64 attq3\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::hiperlab_rostools::mocap_output_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicleID);
      stream.next(m.posx);
      stream.next(m.posy);
      stream.next(m.posz);
      stream.next(m.attyaw);
      stream.next(m.attpitch);
      stream.next(m.attroll);
      stream.next(m.attq0);
      stream.next(m.attq1);
      stream.next(m.attq2);
      stream.next(m.attq3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mocap_output_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hiperlab_rostools::mocap_output_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hiperlab_rostools::mocap_output_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicleID: ";
    Printer<int64_t>::stream(s, indent + "  ", v.vehicleID);
    s << indent << "posx: ";
    Printer<double>::stream(s, indent + "  ", v.posx);
    s << indent << "posy: ";
    Printer<double>::stream(s, indent + "  ", v.posy);
    s << indent << "posz: ";
    Printer<double>::stream(s, indent + "  ", v.posz);
    s << indent << "attyaw: ";
    Printer<double>::stream(s, indent + "  ", v.attyaw);
    s << indent << "attpitch: ";
    Printer<double>::stream(s, indent + "  ", v.attpitch);
    s << indent << "attroll: ";
    Printer<double>::stream(s, indent + "  ", v.attroll);
    s << indent << "attq0: ";
    Printer<double>::stream(s, indent + "  ", v.attq0);
    s << indent << "attq1: ";
    Printer<double>::stream(s, indent + "  ", v.attq1);
    s << indent << "attq2: ";
    Printer<double>::stream(s, indent + "  ", v.attq2);
    s << indent << "attq3: ";
    Printer<double>::stream(s, indent + "  ", v.attq3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HIPERLAB_ROSTOOLS_MESSAGE_MOCAP_OUTPUT_H
